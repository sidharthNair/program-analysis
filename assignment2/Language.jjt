options {
  VISITOR=true;
  MULTI=true;
  NODE_DEFAULT_VOID=true;
}

PARSER_BEGIN(Lexer)

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.HashMap;

public class Lexer {

  public static void main(String args[]) throws ParseException, FileNotFoundException {
    Lexer parser = new Lexer(new BufferedReader(new FileReader(args[0])));
    ASTStart n = parser.Start();
    UndeclaredVisitor uv = new UndeclaredVisitor();
    n.jjtAccept(uv, null);
    DuplicateStructMethodVisitor dv = new DuplicateStructMethodVisitor();
    n.jjtAccept(dv, null);
    MustVisitor mv = new MustVisitor();
    n.jjtAccept(mv, null);
  }

}

PARSER_END(Lexer)

SKIP: { " " }
SKIP: { "\t" }
SKIP: { "\n" }
SKIP: { "\r" }
SKIP: { <"//" (~["\r", "\n"])*>}

TOKEN: { <START: "start"> }
TOKEN: { <BREAK: "break"> }
TOKEN: { <STRUCT: "struct"> }
TOKEN: { <INTERFACE: "interface"> }
TOKEN: { <ENUM: "enum"> }
TOKEN: { <ELSE: "else"> }
TOKEN: { <CONST: "const"> }
TOKEN: { <IF: "if"> }
TOKEN: { <NEW: "new"> }
TOKEN: { <PRINTF: "printf"> }
TOKEN: { <READ: "read"> }
TOKEN: { <RETURN: "return"> }
TOKEN: { <VOID: "void"> }
TOKEN: { <FOR: "for"> }
TOKEN: { <EXTENDS: "extends"> }
TOKEN: { <IMPLEMENTS: "implements"> }
TOKEN: { <CONTINUE: "continue"> }
TOKEN: { <IDENT: (["a"-"z"] | ["A"-"Z"]) ((["a"-"z"] | ["A"-"Z"]) | ["0"-"9"] | "_")*> }
TOKEN: { <NUMCONST: ["0"-"9"] (["0"-"9"])*> }
TOKEN: { <CHARCONST: "'" [" "-"~"] "'"> }
TOKEN: { <BOOLEANCONST: ("True" | "False")> }
TOKEN: { <PLUS: "+"> }
TOKEN: { <MINUS: "-"> }
TOKEN: { <MULTIPLY: "*"> }
TOKEN: { <DIVIDE: "/"> }
TOKEN: { <MODULO: "%"> }
TOKEN: { <EQUAL_TO: "=="> }
TOKEN: { <NOT_EQUAL_TO: "!="> }
TOKEN: { <GREATER_THAN: ">"> }
TOKEN: { <GREATER_THAN_OR_EQUAL_TO: ">="> }
TOKEN: { <LESS_THAN: "<"> }
TOKEN: { <LESS_THAN_OR_EQUAL_TO: "<="> }
TOKEN: { <AND: "&&"> }
TOKEN: { <OR: "||"> }
TOKEN: { <ASSIGN: "="> }

ASTStart Start() #Start :
{}
{
  Program() <EOF>
  { return jjtThis; }
}

void Program() #Program :
{
  Token t;
}
{
  <START>
  t = <IDENT>
  { jjtThis.name = t.image; }
  (ConstDecl() | VarDecl() | StructDecl() | EnumDecl() | InterfaceDecl())* "{" (MethodDecl())* "}"
}

void ConstDecl() #ConstDecl :
{
  Token t;
}
{
  <CONST>
  t = Type() { jjtThis.type = t.image; }
  Const() ("," Const())* ";"
}

void Const() #Const :
{
  Token t;
}
{
  t = <IDENT> { jjtThis.name = t.image; }
  "="
  t = constVal() { jjtThis.value = t.image; }
}

Token constVal() :
{
  Token t;
}
{
  (t = <NUMCONST> | t = <CHARCONST> | t = <BOOLEANCONST>)
  { return t; }
}

void EnumDecl() #EnumDecl :
{
  int val = 0;
  Token t;
}
{
  <ENUM>
  t = <IDENT> { jjtThis.name = t.image; }
  "{"
  val = Enum(val)
  (","
  val = Enum(val)
  )* "}"
}

int Enum(int val) #Enum :
{
  Token t;
}
{
  t = <IDENT> { jjtThis.name = t.image; }
  ("="
  t = <NUMCONST> { val = Integer.parseInt(t.image); }
  )?
  { jjtThis.value = val; }
  { return val + 1; }
}

void VarDecl() #VarDecl :
{
  Token t;
  boolean isArr = false;
}
{
  t = Type() { jjtThis.type = t.image; }
  Var()
  (","
  Var()
  )* ";"
}

void Var() #Var :
{
  Token t;
  boolean isArr = false;
}
{
  t = <IDENT> { jjtThis.name = t.image; }
  ("[" "]" { isArr = true; })?
  { jjtThis.isArray = isArr; }
}

void StructDecl() #StructDecl :
{
  Token t;
}
{
  <STRUCT>
  t = <IDENT> { jjtThis.name = t.image; }
  (<EXTENDS> t = Type() { jjtThis.parent = t.image; })?
  (<IMPLEMENTS> t = Type() { jjtThis.interfaces.add(t.image); }
  ("," t = Type() { jjtThis.interfaces.add(t.image); })*)?
  "{"  (VarDecl())* ("{" (MethodDecl())* "}")? "}"
}

void InterfaceDecl() #InterfaceDecl :
{
  Token t;
}
{
  <INTERFACE>
  t = <IDENT> { jjtThis.name = t.image; }
  "{" (InterfaceMethodDecl())* "}"
}

void InterfaceMethodDecl() #InterfaceMethodDecl:
{
  Token t;
}
{
  (t = Type() | t = <VOID> { jjtThis.returnType = t.image; })
  t = <IDENT> { jjtThis.name = t.image; }
  "(" (FormPars())? ")" ";"
}

void MethodDecl() #MethodDecl :
{
  Token t;
}
{
  (t = Type() { jjtThis.returnType = t.image; } | t = <VOID> { jjtThis.returnType = t.image; })
  t = <IDENT> { jjtThis.name = t.image; }
  "(" (FormPars())? ")" (VarDecl())* "{" (Stmt())* "}"
}

void FormPars() #FormPars:
{}
{
  Parameter() ("," Parameter())*
}

void Parameter() #Parameter:
{
  Token t;
  boolean isArr = false;
}
{
  t = Type() { jjtThis.type = t.image; }
  t = <IDENT> { jjtThis.name = t.image; }
  ("[" "]" { isArr = true; })?
  { jjtThis.isArray = isArr; }
}

Token Type():
{
  Token t;
}
{
  t = <IDENT>
  { return t; }
}

void Stmt() #Stmt:
{
  Token t;
}
{
  (DesignatorStmt() ";" { jjtThis.type = StmtType.DESIGNATOR; })
  | (<IF> "(" Condition() ")" Stmt() { jjtThis.type = StmtType.IF; } (<ELSE> Stmt() { jjtThis.type = StmtType.IF_ELSE; })?)
  | (<FOR> "("
              (DesignatorStmt() { jjtThis.forMask |= 1; })? ";"
              (Condition() { jjtThis.forMask |= 2; })? ";"
              (DesignatorStmt() { jjtThis.forMask |= 4; })?
            ")" Stmt() { jjtThis.type = StmtType.FOR; } )
  | (<BREAK> ";" { jjtThis.type = StmtType.BREAK; })
  | (<CONTINUE> ";" { jjtThis.type = StmtType.CONTINUE; })
  | (<RETURN> (Expression())? ";" { jjtThis.type = StmtType.RETURN; })
  | (<READ> "(" Designator() ")" ";" { jjtThis.type = StmtType.READ; })
  | (<PRINTF> "(" Expression()
              ("," t = <NUMCONST> { jjtThis.printNums.add(Integer.parseInt(t.image)); })?
              ")" ";" { jjtThis.type = StmtType.PRINTF; })
  | ("{" (Stmt())* "}" { jjtThis.type = StmtType.BLOCK; })
}

void DesignatorStmt() #DesignatorStmt:
{}
{
  Designator() ((Assignop() Expression())
                | ("(" (ActPars())? ")")
                | ("++" { jjtThis.increment = true; })
                | ("--" { jjtThis.decrement = true; }))
}

void ActPars() #ActPars:
{}
{
  Expression() ("," Expression())*
}

void Condition() #Condition:
{}
{
  CondTerm() ("||" CondTerm())*
}

void CondTerm() #CondTerm:
{}
{
  CondFact() ("&&" CondFact())*
}

void CondFact() #CondFact:
{}
{
  Expression() (Relop() Expression())?
}

void Expression() #Expression:
{}
{
  ("-" { jjtThis.leadingMinus = true; })? Term() (Addop() Term())*
}

void Term() #Term:
{}
{
  Factor() (Mulop() Factor())*
}

void Factor() #Factor:
{
  Token t;
}
{
  (Designator() { jjtThis.type = FactorType.DESIGNATOR; } ("(" (ActPars())? ")" { jjtThis.type = FactorType.ACTPARS; })?)
  | (t = <NUMCONST> { jjtThis.type = FactorType.NUMCONST; jjtThis.numConst = Integer.parseInt(t.image); })
  | (t = <CHARCONST> { jjtThis.type = FactorType.CHARCONST; jjtThis.charConst = t.image; })
  | (t = <BOOLEANCONST> { jjtThis.type = FactorType.BOOLCONST; jjtThis.boolConst = Boolean.parseBoolean(t.image); })
  | (<NEW> t = Type() { jjtThis.dataType = t.image; } ("[" Expression() "]")? { jjtThis.type = FactorType.NEW; })
  | ("(" Expression() ")" { jjtThis.type = FactorType.EXPRESSION; })
}

void Designator() #Designator:
{
  Token t;
  int childIndex = 0;
}
{
  t = <IDENT> { jjtThis.name = t.image; }
  (("." t = <IDENT> { jjtThis.modifiers.add(t.image); })
   | ("[" Expression() "]" { jjtThis.modifiers.add("" + childIndex++); }))*
}

void Assignop() #Assignop:
{}
{
  <ASSIGN>
}

void Relop() #Relop:
{
  Token t;
}
{
  t = <EQUAL_TO>
  | t = <NOT_EQUAL_TO>
  | t = <GREATER_THAN>
  | t = <GREATER_THAN_OR_EQUAL_TO>
  | t = <LESS_THAN>
  | t = <LESS_THAN_OR_EQUAL_TO>
  { jjtThis.relation = t.image; }

}

void Addop() #Addop:
{
  Token t;
}
{
  t = <PLUS> | t = <MINUS>
  { jjtThis.operator = t.image; }
}

void Mulop() #Mulop:
{
  Token t;
}
{
  t = <MULTIPLY> | t = <DIVIDE> | t = <MODULO>
  { jjtThis.operator = t.image; }
}
