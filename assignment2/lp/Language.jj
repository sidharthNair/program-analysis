/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. lp/Language.jj */
/*@egen*/options {
               
             
                         
}

PARSER_BEGIN(Lexer)

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.HashMap;

public class Lexer/*@bgen(jjtree)*/implements LexerTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTLexerState jjtree = new JJTLexerState();

/*@egen*/

  public static void main(String args[]) throws ParseException, FileNotFoundException {
    Lexer parser = new Lexer(new BufferedReader(new FileReader(args[0])));
    ASTStart n = parser.Start();
    UndeclaredVisitor uv = new UndeclaredVisitor();
    n.jjtAccept(uv, null);
  }

}

PARSER_END(Lexer)

SKIP: { " " }
SKIP: { "\t" }
SKIP: { "\n" }
SKIP: { "\r" }
SKIP: { <"//" (~["\r", "\n"])*>}

TOKEN: { <START: "start"> }
TOKEN: { <BREAK: "break"> }
TOKEN: { <STRUCT: "struct"> }
TOKEN: { <INTERFACE: "interface"> }
TOKEN: { <ENUM: "enum"> }
TOKEN: { <ELSE: "else"> }
TOKEN: { <CONST: "const"> }
TOKEN: { <IF: "if"> }
TOKEN: { <NEW: "new"> }
TOKEN: { <PRINTF: "printf"> }
TOKEN: { <READ: "read"> }
TOKEN: { <RETURN: "return"> }
TOKEN: { <VOID: "void"> }
TOKEN: { <FOR: "for"> }
TOKEN: { <EXTENDS: "extends"> }
TOKEN: { <IMPLEMENTS: "implements"> }
TOKEN: { <CONTINUE: "continue"> }
TOKEN: { <IDENT: (["a"-"z"] | ["A"-"Z"]) ((["a"-"z"] | ["A"-"Z"]) | ["0"-"9"] | "_")*> }
TOKEN: { <NUMCONST: ["0"-"9"] (["0"-"9"])*> }
TOKEN: { <CHARCONST: "'" [" "-"~"] "'"> }
TOKEN: { <BOOLEANCONST: ("True" | "False")> }
TOKEN: { <PLUS: "+"> }
TOKEN: { <MINUS: "-"> }
TOKEN: { <MULTIPLY: "*"> }
TOKEN: { <DIVIDE: "/"> }
TOKEN: { <MODULO: "%"> }
TOKEN: { <EQUAL_TO: "=="> }
TOKEN: { <NOT_EQUAL_TO: "!="> }
TOKEN: { <GREATER_THAN: ">"> }
TOKEN: { <GREATER_THAN_OR_EQUAL_TO: ">="> }
TOKEN: { <LESS_THAN: "<"> }
TOKEN: { <LESS_THAN_OR_EQUAL_TO: "<="> }
TOKEN: { <AND: "&&"> }
TOKEN: { <OR: "||"> }
TOKEN: { <ASSIGN: "="> }

ASTStart Start()        :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Program() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Program()          :
{/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Program */
  try {
/*@egen*/
  <START>
  t = <IDENT>
  { jjtn000.name = t.image; }
  (ConstDecl() | VarDecl() | StructDecl() | EnumDecl() | InterfaceDecl())* "{" (MethodDecl())* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConstDecl()            :
{/*@bgen(jjtree) ConstDecl */
  ASTConstDecl jjtn000 = new ASTConstDecl(JJTCONSTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ConstDecl */
  try {
/*@egen*/
  <CONST>
  t = Type() { jjtn000.type = t.image; }
  Const() ("," Const())* ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Const()        :
{/*@bgen(jjtree) Const */
  ASTConst jjtn000 = new ASTConst(JJTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Const */
  try {
/*@egen*/
  t = <IDENT> { jjtn000.name = t.image; }
  "="
  t = constVal()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.value = t.image; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token constVal() :
{
  Token t;
}
{
  (t = <NUMCONST> | t = <CHARCONST> | t = <BOOLEANCONST>)
  { return t; }
}

void EnumDecl()           :
{/*@bgen(jjtree) EnumDecl */
  ASTEnumDecl jjtn000 = new ASTEnumDecl(JJTENUMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int val = 0;
  Token t;
}
{/*@bgen(jjtree) EnumDecl */
  try {
/*@egen*/
  <ENUM>
  t = <IDENT> { jjtn000.name = t.image; }
  "{"
  val = Enum(val)
  (","
  val = Enum(val)
  )* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

int Enum(int val)       :
{/*@bgen(jjtree) Enum */
  ASTEnum jjtn000 = new ASTEnum(JJTENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Enum */
  try {
/*@egen*/
  t = <IDENT> { jjtn000.name = t.image; }
  ("="
  t = <NUMCONST> { val = Integer.parseInt(t.image); }
  )?
  { jjtn000.value = val; }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return val + 1; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VarDecl()          :
{/*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  boolean isArr = false;
}
{/*@bgen(jjtree) VarDecl */
  try {
/*@egen*/
  t = Type() { jjtn000.type = t.image; }
  Var()
  (","
  Var()
  )* ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Var()      :
{/*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  boolean isArr = false;
}
{/*@bgen(jjtree) Var */
  try {
/*@egen*/
  t = <IDENT> { jjtn000.name = t.image; }
  ("[" "]" { isArr = true; })?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.isArray = isArr; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StructDecl()             :
{/*@bgen(jjtree) StructDecl */
  ASTStructDecl jjtn000 = new ASTStructDecl(JJTSTRUCTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) StructDecl */
  try {
/*@egen*/
  <STRUCT>
  t = <IDENT> { jjtn000.name = t.image; }
  (<EXTENDS> t = Type() { jjtn000.parent = t.image; })?
  (<IMPLEMENTS> t = Type() { jjtn000.interfaces.add(t.image); }
  ("," t = Type() { jjtn000.interfaces.add(t.image); })*)?
  "{"  (VarDecl())* ("{" (MethodDecl())* "}")? "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceDecl()                :
{/*@bgen(jjtree) InterfaceDecl */
  ASTInterfaceDecl jjtn000 = new ASTInterfaceDecl(JJTINTERFACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) InterfaceDecl */
  try {
/*@egen*/
  <INTERFACE>
  t = <IDENT> { jjtn000.name = t.image; }
  "{" (InterfaceMethodDecl())* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceMethodDecl()                     :
{/*@bgen(jjtree) InterfaceMethodDecl */
  ASTInterfaceMethodDecl jjtn000 = new ASTInterfaceMethodDecl(JJTINTERFACEMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) InterfaceMethodDecl */
  try {
/*@egen*/
  (t = Type() | t = <VOID> { jjtn000.returnType = t.image; })
  t = <IDENT> { jjtn000.name = t.image; }
  "(" (FormPars())? ")" ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodDecl()             :
{/*@bgen(jjtree) MethodDecl */
  ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) MethodDecl */
  try {
/*@egen*/
  (t = Type() | t = <VOID> { jjtn000.returnType = t.image; })
  t = <IDENT> { jjtn000.name = t.image; }
  "(" (FormPars())? ")" (VarDecl())* "{" (Stmt())* "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FormPars()          :
{/*@bgen(jjtree) FormPars */
  ASTFormPars jjtn000 = new ASTFormPars(JJTFORMPARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormPars */
  try {
/*@egen*/
  Parameter() ("," Parameter())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Parameter()           :
{/*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  boolean isArr = false;
}
{/*@bgen(jjtree) Parameter */
  try {
/*@egen*/
  t = Type() { jjtn000.type = t.image; }
  t = <IDENT> { jjtn000.name = t.image; }
  ("[" "]" { isArr = true; })?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.isArray = isArr; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Type():
{
  Token t;
}
{
  t = <IDENT>
  { return t; }
}

void Stmt()      :
{/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Stmt */
  try {
/*@egen*/
  (DesignatorStmt() ";"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.type = StmtType.DESIGNATOR; })
  | (<IF> "(" Condition() ")" Stmt() { jjtn000.type = StmtType.IF; } (<ELSE> Stmt() { jjtn000.type = StmtType.IF_ELSE; })?)
  | (<FOR> "("
              (DesignatorStmt() { jjtn000.forMask |= 1; })? ";"
              (Condition() { jjtn000.forMask |= 2; })? ";"
              (DesignatorStmt() { jjtn000.forMask |= 4; })?
            ")" Stmt()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.type = StmtType.FOR; } )
  | (<BREAK> ";"/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.type = StmtType.BREAK; })
  | (<CONTINUE> ";"/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.type = StmtType.CONTINUE; })
  | (<RETURN> (Expression())? ";"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { jjtn000.type = StmtType.RETURN; })
  | (<READ> "(" Designator() ")" ";"/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { jjtn000.type = StmtType.READ; })
  | (<PRINTF> "(" Expression()
              ("," t = <NUMCONST> { jjtn000.printNums.add(Integer.parseInt(t.image)); })?
              ")" ";"/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.type = StmtType.PRINTF; })
  | ("{" (Stmt())* "}"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.type = StmtType.BLOCK; })/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DesignatorStmt()                :
{/*@bgen(jjtree) DesignatorStmt */
  ASTDesignatorStmt jjtn000 = new ASTDesignatorStmt(JJTDESIGNATORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DesignatorStmt */
  try {
/*@egen*/
  Designator() ((Assignop() Expression())
                | ("(" (ActPars())? ")")
                | ("++"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.increment = true; })
                | ("--"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.decrement = true; }))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActPars()         :
{/*@bgen(jjtree) ActPars */
  ASTActPars jjtn000 = new ASTActPars(JJTACTPARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActPars */
  try {
/*@egen*/
  Expression() ("," Expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Condition()           :
{/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  CondTerm() ("||" CondTerm())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CondTerm()          :
{/*@bgen(jjtree) CondTerm */
  ASTCondTerm jjtn000 = new ASTCondTerm(JJTCONDTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CondTerm */
  try {
/*@egen*/
  CondFact() ("&&" CondFact())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CondFact()          :
{/*@bgen(jjtree) CondFact */
  ASTCondFact jjtn000 = new ASTCondFact(JJTCONDFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CondFact */
  try {
/*@egen*/
  Expression() (Relop() Expression())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expression()            :
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  ("-" { jjtn000.leadingMinus = true; })? Term() (Addop() Term())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Term()      :
{/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  Factor() (Mulop() Factor())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Factor()        :
{/*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Factor */
  try {
/*@egen*/
  (Designator() { jjtn000.type = FactorType.DESIGNATOR; } ("(" (ActPars())? ")" { jjtn000.type = FactorType.ACTPARS; })?)
  | (t = <NUMCONST>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.type = FactorType.NUMCONST; jjtn000.numConst = Integer.parseInt(t.image); })
  | (t = <CHARCONST>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.type = FactorType.CHARCONST; jjtn000.charConst = t.image; })
  | (t = <BOOLEANCONST>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { jjtn000.type = FactorType.BOOLCONST; jjtn000.boolConst = Boolean.parseBoolean(t.image); })
  | (<NEW> t = Type() { jjtn000.dataType = t.image; } ("[" Expression() "]")?/*@bgen(jjtree)*/
                                                                              {
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                              }
/*@egen*/ { jjtn000.type = FactorType.NEW; })
  | ("(" Expression() ")"/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { jjtn000.type = FactorType.EXPRESSION; })/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Designator()            :
{/*@bgen(jjtree) Designator */
  ASTDesignator jjtn000 = new ASTDesignator(JJTDESIGNATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
  int childIndex = 0;
}
{/*@bgen(jjtree) Designator */
  try {
/*@egen*/
  t = <IDENT> { jjtn000.name = t.image; }
  (("." t = <IDENT> { jjtn000.modifiers.add(t.image); })
   | ("[" Expression() "]" { jjtn000.modifiers.add("" + childIndex++); }))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignop()          :
{/*@bgen(jjtree) Assignop */
  ASTAssignop jjtn000 = new ASTAssignop(JJTASSIGNOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignop */
  try {
/*@egen*/
  <ASSIGN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Relop()       :
{/*@bgen(jjtree) Relop */
  ASTRelop jjtn000 = new ASTRelop(JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Relop */
  try {
/*@egen*/
  t = <EQUAL_TO>
  | t = <NOT_EQUAL_TO>
  | t = <GREATER_THAN>
  | t = <GREATER_THAN_OR_EQUAL_TO>
  | t = <LESS_THAN>
  | t = <LESS_THAN_OR_EQUAL_TO>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.relation = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Addop()       :
{/*@bgen(jjtree) Addop */
  ASTAddop jjtn000 = new ASTAddop(JJTADDOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Addop */
  try {
/*@egen*/
  t = <PLUS> | t = <MINUS>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.operator = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Mulop()       :
{/*@bgen(jjtree) Mulop */
  ASTMulop jjtn000 = new ASTMulop(JJTMULOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) Mulop */
  try {
/*@egen*/
  t = <MULTIPLY> | t = <DIVIDE> | t = <MODULO>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.operator = t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
