/* Generated By:JJTree&JavaCC: Do not edit this line. Lexer.java */
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.HashMap;

public class Lexer/*@bgen(jjtree)*/implements LexerTreeConstants, LexerConstants {/*@bgen(jjtree)*/
  protected static JJTLexerState jjtree = new JJTLexerState();
  public static HashMap<String, Integer> symbolTable = new HashMap<String, Integer>();

  public static void main(String args[]) throws ParseException, FileNotFoundException {
    Lexer parser = new Lexer(new BufferedReader(new FileReader(args[0])));
    ASTStart n = parser.Start();
    TestingVisitor v = new TestingVisitor();
    n.jjtAccept(v, null);
  }

  static final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Program();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

// <START> <IDENT> (ConstDecl() | VarDecl() | StructDecl() | EnumDecl() | InterfaceDecl())* "{" (MethodDecl())* "}"
  static final public void Program() throws ParseException {
 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(START);
      t = jj_consume_token(IDENT);
    jjtn000.name = t.image;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
        case INTERFACE:
        case ENUM:
        case CONST:
        case IDENT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
          ConstDecl();
          break;
        case IDENT:
          VarDecl();
          break;
        case STRUCT:
          StructDecl();
          break;
        case ENUM:
          EnumDecl();
          break;
        case INTERFACE:
          InterfaceDecl();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(41);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case IDENT:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        MethodDecl();
      }
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ConstDecl() throws ParseException {
 /*@bgen(jjtree) ConstDecl */
  ASTConstDecl jjtn000 = new ASTConstDecl(JJTCONSTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(CONST);
      t = Type();
               jjtn000.type = t.image;
      Const();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        jj_consume_token(43);
        Const();
      }
      jj_consume_token(44);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Const() throws ParseException {
 /*@bgen(jjtree) Const */
  ASTConst jjtn000 = new ASTConst(JJTCONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      jj_consume_token(ASSIGN);
      t = constVal();
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.value = t.image;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Token constVal() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMCONST:
      t = jj_consume_token(NUMCONST);
      break;
    case CHARCONST:
      t = jj_consume_token(CHARCONST);
      break;
    case BOOLEANCONST:
      t = jj_consume_token(BOOLEANCONST);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void EnumDecl() throws ParseException {
 /*@bgen(jjtree) EnumDecl */
  ASTEnumDecl jjtn000 = new ASTEnumDecl(JJTENUMDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int val = 0;
  Token t;
    try {
      jj_consume_token(ENUM);
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      jj_consume_token(41);
      val = Enum(val);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        jj_consume_token(43);
        val = Enum(val);
      }
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public int Enum(int val) throws ParseException {
 /*@bgen(jjtree) Enum */
  ASTEnum jjtn000 = new ASTEnum(JJTENUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        t = jj_consume_token(NUMCONST);
                   val = Integer.parseInt(t.image);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    jjtn000.value = val;
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return val + 1;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void VarDecl() throws ParseException {
 /*@bgen(jjtree) VarDecl */
  ASTVarDecl jjtn000 = new ASTVarDecl(JJTVARDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  boolean isArr = false;
    try {
      t = Type();
               jjtn000.type = t.image;
      Var();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        jj_consume_token(43);
        Var();
      }
      jj_consume_token(44);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Var() throws ParseException {
 /*@bgen(jjtree) Var */
  ASTVar jjtn000 = new ASTVar(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  boolean isArr = false;
    try {
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        jj_consume_token(46);
             isArr = true;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isArray = isArr;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void StructDecl() throws ParseException {
 /*@bgen(jjtree) StructDecl */
  ASTStructDecl jjtn000 = new ASTStructDecl(JJTSTRUCTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(STRUCT);
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        t = Type();
                          jjtn000.parent = t.image;
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jj_consume_token(IMPLEMENTS);
        t = Type();
                             jjtn000.interfaces.add(t.image);
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 43:
            ;
            break;
          default:
            jj_la1[10] = jj_gen;
            break label_6;
          }
          jj_consume_token(43);
          t = Type();
                    jjtn000.interfaces.add(t.image);
        }
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(41);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        VarDecl();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID:
          case IDENT:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_8;
          }
          MethodDecl();
        }
        jj_consume_token(42);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void InterfaceDecl() throws ParseException {
 /*@bgen(jjtree) InterfaceDecl */
  ASTInterfaceDecl jjtn000 = new ASTInterfaceDecl(JJTINTERFACEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(INTERFACE);
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      jj_consume_token(41);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
        case IDENT:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_9;
        }
        InterfaceMethodDecl();
      }
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void InterfaceMethodDecl() throws ParseException {
 /*@bgen(jjtree) InterfaceMethodDecl */
  ASTInterfaceMethodDecl jjtn000 = new ASTInterfaceMethodDecl(JJTINTERFACEMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = Type();
        break;
      case VOID:
        t = jj_consume_token(VOID);
                             jjtn000.returnType = t.image;
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        FormPars();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      jj_consume_token(48);
      jj_consume_token(44);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void MethodDecl() throws ParseException {
 /*@bgen(jjtree) MethodDecl */
  ASTMethodDecl jjtn000 = new ASTMethodDecl(JJTMETHODDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        t = Type();
        break;
      case VOID:
        t = jj_consume_token(VOID);
                             jjtn000.returnType = t.image;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        FormPars();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(48);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_10;
        }
        VarDecl();
      }
      jj_consume_token(41);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
        case IF:
        case PRINTF:
        case READ:
        case RETURN:
        case FOR:
        case CONTINUE:
        case IDENT:
        case 41:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_11;
        }
        Stmt();
      }
      jj_consume_token(42);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// Type() <IDENT> ("[" "]")? ("," Type() <IDENT> ("[" "]")?)*
  static final public void FormPars() throws ParseException {
 /*@bgen(jjtree) FormPars */
  ASTFormPars jjtn000 = new ASTFormPars(JJTFORMPARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Parameter();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_12;
        }
        jj_consume_token(43);
        Parameter();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Parameter() throws ParseException {
 /*@bgen(jjtree) Parameter */
  ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  boolean isArr = false;
    try {
      t = Type();
               jjtn000.type = t.image;
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        jj_consume_token(46);
             isArr = true;
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isArray = isArr;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public Token Type() throws ParseException {
  Token t;
    t = jj_consume_token(IDENT);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public void Stmt() throws ParseException {
 /*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        DesignatorStmt();
        jj_consume_token(44);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.type = StmtType.DESIGNATOR;
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(47);
        Condition();
        jj_consume_token(48);
        Stmt();
                                       jjtn000.type = StmtType.IF;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          Stmt();
                                                                                      jjtn000.type = StmtType.IF_ELSE;
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(47);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          DesignatorStmt();
                                  jjtn000.forMask |= 1;
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(44);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case IDENT:
        case NUMCONST:
        case CHARCONST:
        case BOOLEANCONST:
        case MINUS:
        case 47:
          Condition();
                             jjtn000.forMask |= 2;
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(44);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          DesignatorStmt();
                                  jjtn000.forMask |= 4;
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(48);
        Stmt();
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.type = StmtType.FOR;
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(44);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.type = StmtType.BREAK;
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        jj_consume_token(44);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.type = StmtType.CONTINUE;
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case IDENT:
        case NUMCONST:
        case CHARCONST:
        case BOOLEANCONST:
        case MINUS:
        case 47:
          Expression();
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        jj_consume_token(44);
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtn000.type = StmtType.RETURN;
        break;
      case READ:
        jj_consume_token(READ);
        jj_consume_token(47);
        Designator();
        jj_consume_token(48);
        jj_consume_token(44);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtn000.type = StmtType.READ;
        break;
      case PRINTF:
        jj_consume_token(PRINTF);
        jj_consume_token(47);
        Expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          jj_consume_token(43);
          t = jj_consume_token(NUMCONST);
                                    jjtn000.printNums.add(Integer.parseInt(t.image));
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        jj_consume_token(48);
        jj_consume_token(44);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        jjtn000.type = StmtType.PRINTF;
        break;
      case 41:
        jj_consume_token(41);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
          case IF:
          case PRINTF:
          case READ:
          case RETURN:
          case FOR:
          case CONTINUE:
          case IDENT:
          case 41:
            ;
            break;
          default:
            jj_la1[30] = jj_gen;
            break label_13;
          }
          Stmt();
        }
        jj_consume_token(42);
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.type = StmtType.BLOCK;
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void DesignatorStmt() throws ParseException {
 /*@bgen(jjtree) DesignatorStmt */
  ASTDesignatorStmt jjtn000 = new ASTDesignatorStmt(JJTDESIGNATORSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Designator();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        Assignop();
        Expression();
        break;
      case 47:
        jj_consume_token(47);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case IDENT:
        case NUMCONST:
        case CHARCONST:
        case BOOLEANCONST:
        case MINUS:
        case 47:
          ActPars();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        jj_consume_token(48);
        break;
      case 49:
        jj_consume_token(49);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.increment = true;
        break;
      case 50:
        jj_consume_token(50);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.decrement = true;
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void ActPars() throws ParseException {
 /*@bgen(jjtree) ActPars */
  ASTActPars jjtn000 = new ASTActPars(JJTACTPARS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_14;
        }
        jj_consume_token(43);
        Expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CondTerm();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        jj_consume_token(OR);
        CondTerm();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CondTerm() throws ParseException {
 /*@bgen(jjtree) CondTerm */
  ASTCondTerm jjtn000 = new ASTCondTerm(JJTCONDTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CondFact();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_16;
        }
        jj_consume_token(AND);
        CondFact();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void CondFact() throws ParseException {
 /*@bgen(jjtree) CondFact */
  ASTCondFact jjtn000 = new ASTCondFact(JJTCONDFACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_TO:
      case NOT_EQUAL_TO:
      case GREATER_THAN:
      case GREATER_THAN_OR_EQUAL_TO:
      case LESS_THAN:
      case LESS_THAN_OR_EQUAL_TO:
        Relop();
        Expression();
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
        jj_consume_token(MINUS);
         jjtn000.leadingMinus = true;
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      Term();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_17;
        }
        Addop();
        Term();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Term() throws ParseException {
 /*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Factor();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case MODULO:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_18;
        }
        Mulop();
        Factor();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Factor() throws ParseException {
 /*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        Designator();
                  jjtn000.type = FactorType.DESIGNATOR;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          jj_consume_token(47);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case IDENT:
          case NUMCONST:
          case CHARCONST:
          case BOOLEANCONST:
          case MINUS:
          case 47:
            ActPars();
            break;
          default:
            jj_la1[41] = jj_gen;
            ;
          }
          jj_consume_token(48);
                                                                                  jjtn000.type = FactorType.ACTPARS;
          break;
        default:
          jj_la1[42] = jj_gen;
          ;
        }
        break;
      case NUMCONST:
        t = jj_consume_token(NUMCONST);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.type = FactorType.NUMCONST; jjtn000.numConst = Integer.parseInt(t.image);
        break;
      case CHARCONST:
        t = jj_consume_token(CHARCONST);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.type = FactorType.CHARCONST; jjtn000.charConst = t.image;
        break;
      case BOOLEANCONST:
        t = jj_consume_token(BOOLEANCONST);
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.type = FactorType.BOOLCONST; jjtn000.boolConst = Boolean.parseBoolean(t.image);
        break;
      case NEW:
        jj_consume_token(NEW);
        Type();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
          jj_consume_token(45);
          Expression();
          jj_consume_token(46);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                            jjtn000.type = FactorType.NEW;
        break;
      case 47:
        jj_consume_token(47);
        Expression();
        jj_consume_token(48);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            jjtn000.type = FactorType.EXPRESSION;
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Designator() throws ParseException {
 /*@bgen(jjtree) Designator */
  ASTDesignator jjtn000 = new ASTDesignator(JJTDESIGNATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
  int childIndex = 0;
    try {
      t = jj_consume_token(IDENT);
                jjtn000.name = t.image;
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 45:
        case 51:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_19;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          jj_consume_token(51);
          t = jj_consume_token(IDENT);
                      jjtn000.modifiers.add(t.image);
          break;
        case 45:
          jj_consume_token(45);
          Expression();
          jj_consume_token(46);
                             jjtn000.modifiers.add("" + childIndex++);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Assignop() throws ParseException {
 /*@bgen(jjtree) Assignop */
  ASTAssignop jjtn000 = new ASTAssignop(JJTASSIGNOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ASSIGN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Relop() throws ParseException {
 /*@bgen(jjtree) Relop */
  ASTRelop jjtn000 = new ASTRelop(JJTRELOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL_TO:
        t = jj_consume_token(EQUAL_TO);
        break;
      case NOT_EQUAL_TO:
        t = jj_consume_token(NOT_EQUAL_TO);
        break;
      case GREATER_THAN:
        t = jj_consume_token(GREATER_THAN);
        break;
      case GREATER_THAN_OR_EQUAL_TO:
        t = jj_consume_token(GREATER_THAN_OR_EQUAL_TO);
        break;
      case LESS_THAN:
        t = jj_consume_token(LESS_THAN);
        break;
      case LESS_THAN_OR_EQUAL_TO:
        t = jj_consume_token(LESS_THAN_OR_EQUAL_TO);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.relation = t.image;
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Addop() throws ParseException {
 /*@bgen(jjtree) Addop */
  ASTAddop jjtn000 = new ASTAddop(JJTADDOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t = jj_consume_token(PLUS);
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.operator = t.image;
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Mulop() throws ParseException {
 /*@bgen(jjtree) Mulop */
  ASTMulop jjtn000 = new ASTMulop(JJTMULOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        t = jj_consume_token(MULTIPLY);
        break;
      case DIVIDE:
        t = jj_consume_token(DIVIDE);
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.operator = t.image;
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public LexerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x801700,0x801700,0x840000,0x0,0x7000000,0x0,0x0,0x0,0x0,0x100000,0x0,0x200000,0x800000,0x840000,0x0,0x840000,0x840000,0x800000,0x840000,0x800000,0x800000,0xcba080,0x0,0x0,0x800,0x800000,0x17804000,0x800000,0x17804000,0x0,0xcba080,0xcba080,0x17804000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x18000000,0xe0000000,0x17804000,0x0,0x0,0x7804000,0x0,0x0,0x0,0x18000000,0xe0000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x800,0x0,0x800,0x100,0x800,0x2000,0x0,0x800,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x800,0x2000,0x0,0x0,0x8000,0x0,0x8000,0x800,0x200,0x200,0x8000,0x68100,0x800,0x80,0x40,0x3f,0x0,0x0,0x0,0x8000,0x8000,0x2000,0x8000,0x82000,0x82000,0x3f,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
