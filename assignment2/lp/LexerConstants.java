/* Generated By:JJTree&JavaCC: Do not edit this line. LexerConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int START = 6;
  /** RegularExpression Id. */
  int BREAK = 7;
  /** RegularExpression Id. */
  int STRUCT = 8;
  /** RegularExpression Id. */
  int INTERFACE = 9;
  /** RegularExpression Id. */
  int ENUM = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int CONST = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int NEW = 14;
  /** RegularExpression Id. */
  int PRINTF = 15;
  /** RegularExpression Id. */
  int READ = 16;
  /** RegularExpression Id. */
  int RETURN = 17;
  /** RegularExpression Id. */
  int VOID = 18;
  /** RegularExpression Id. */
  int FOR = 19;
  /** RegularExpression Id. */
  int EXTENDS = 20;
  /** RegularExpression Id. */
  int IMPLEMENTS = 21;
  /** RegularExpression Id. */
  int CONTINUE = 22;
  /** RegularExpression Id. */
  int IDENT = 23;
  /** RegularExpression Id. */
  int NUMCONST = 24;
  /** RegularExpression Id. */
  int CHARCONST = 25;
  /** RegularExpression Id. */
  int BOOLEANCONST = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MULTIPLY = 29;
  /** RegularExpression Id. */
  int DIVIDE = 30;
  /** RegularExpression Id. */
  int MODULO = 31;
  /** RegularExpression Id. */
  int EQUAL_TO = 32;
  /** RegularExpression Id. */
  int NOT_EQUAL_TO = 33;
  /** RegularExpression Id. */
  int GREATER_THAN = 34;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQUAL_TO = 35;
  /** RegularExpression Id. */
  int LESS_THAN = 36;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQUAL_TO = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int ASSIGN = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"start\"",
    "\"break\"",
    "\"struct\"",
    "\"interface\"",
    "\"enum\"",
    "\"else\"",
    "\"const\"",
    "\"if\"",
    "\"new\"",
    "\"printf\"",
    "\"read\"",
    "\"return\"",
    "\"void\"",
    "\"for\"",
    "\"extends\"",
    "\"implements\"",
    "\"continue\"",
    "<IDENT>",
    "<NUMCONST>",
    "<CHARCONST>",
    "<BOOLEANCONST>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\">=\"",
    "\"<\"",
    "\"<=\"",
    "\"&&\"",
    "\"||\"",
    "\"=\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"++\"",
    "\"--\"",
    "\".\"",
  };

}
